searchData={"items":[{"type":"module","title":"elector","doc":"Elector - Distributed Leader Election for Erlang/OTP This is the main API module for the Elector application. Elector automatically detects all nodes in a distributed Erlang cluster and chooses a leader node. Elections are started automatically when the application starts or when nodes join/leave the cluster. ## Quick Start The  elector  application must be started before calling any functions: <span class=\"w\">  </span><span class=\"c1\">% Start elector application</span><span class=\"w\">\n  </span><span class=\"ss\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">application</span><span class=\"p\">:</span><span class=\"nf\">start</span><span class=\"p\" data-group-id=\"6462155011-1\">(</span><span class=\"ss\">elector</span><span class=\"p\" data-group-id=\"6462155011-1\">)</span><span class=\"p\">.</span><span class=\"w\">\n \n  </span><span class=\"c1\">% Check if current node is leader</span><span class=\"w\">\n  </span><span class=\"p\" data-group-id=\"6462155011-2\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IsLeader</span><span class=\"p\" data-group-id=\"6462155011-2\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">is_leader</span><span class=\"p\" data-group-id=\"6462155011-3\">(</span><span class=\"p\" data-group-id=\"6462155011-3\">)</span><span class=\"p\">.</span><span class=\"w\">\n \n  </span><span class=\"c1\">% Get the current leader node</span><span class=\"w\">\n  </span><span class=\"p\" data-group-id=\"6462155011-4\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LeaderNode</span><span class=\"p\" data-group-id=\"6462155011-4\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">get_leader</span><span class=\"p\" data-group-id=\"6462155011-5\">(</span><span class=\"p\" data-group-id=\"6462155011-5\">)</span><span class=\"p\">.</span><span class=\"w\">\n \n  </span><span class=\"c1\">% Manually trigger an election</span><span class=\"w\">\n  </span><span class=\"p\" data-group-id=\"6462155011-6\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">election_started</span><span class=\"p\" data-group-id=\"6462155011-6\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">elect</span><span class=\"p\" data-group-id=\"6462155011-7\">(</span><span class=\"p\" data-group-id=\"6462155011-7\">)</span><span class=\"p\">.</span> ## Automatic Elections When  elector  is started, it handles elections automatically: - On application startup - When new nodes join the cluster - When existing nodes leave the cluster You can also trigger elections manually using  elect/0  or  elect_sync/0 . For detailed configuration and setup instructions, see the [Getting Started guide](readme.html).","ref":"elector.html"},{"type":"function","title":"elector.clear_leader/0","doc":"Clears the leader node and sets it to undefined.","ref":"elector.html#clear_leader/0"},{"type":"function","title":"elector.elect/0","doc":"Starts an election process asynchronously. This function triggers a new leader election across the cluster. The election runs in the background and doesn't block the caller. ## Returns -  {ok, async_election_started}  - Election started successfully -  {error, quorum_size_not_met}  - Not enough nodes in cluster -  {error, election_commission_not_up}  - Election service unavailable ## Examples <span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">elect</span><span class=\"p\" data-group-id=\"0721322894-1\">(</span><span class=\"p\" data-group-id=\"0721322894-1\">)</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"0721322894-2\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">async_election_started</span><span class=\"p\" data-group-id=\"0721322894-2\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"0721322894-3\">(</span><span class=\"s\">&quot;Election started</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\" data-group-id=\"0721322894-3\">)</span><span class=\"p\">;</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"0721322894-4\">{</span><span class=\"ss\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Reason</span><span class=\"p\" data-group-id=\"0721322894-4\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"0721322894-5\">(</span><span class=\"s\">&quot;Election failed: </span><span class=\"si\">~p</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\" data-group-id=\"0721322894-6\">[</span><span class=\"n\">Reason</span><span class=\"p\" data-group-id=\"0721322894-6\">]</span><span class=\"p\" data-group-id=\"0721322894-5\">)</span><span class=\"w\">\n  </span><span class=\"k\">end</span><span class=\"p\">.</span>","ref":"elector.html#elect/0"},{"type":"function","title":"elector.elect_sync/0","doc":"Starts an election synchronously.","ref":"elector.html#elect_sync/0"},{"type":"function","title":"elector.get_leader/0","doc":"Returns the current leader node's name. ## Examples <span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">get_leader</span><span class=\"p\" data-group-id=\"1057183775-1\">(</span><span class=\"p\" data-group-id=\"1057183775-1\">)</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"1057183775-2\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LeaderNode</span><span class=\"p\" data-group-id=\"1057183775-2\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"1057183775-3\">(</span><span class=\"s\">&quot;Leader is: </span><span class=\"si\">~p</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\" data-group-id=\"1057183775-4\">[</span><span class=\"n\">LeaderNode</span><span class=\"p\" data-group-id=\"1057183775-4\">]</span><span class=\"p\" data-group-id=\"1057183775-3\">)</span><span class=\"p\">;</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"1057183775-5\">{</span><span class=\"ss\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">leader_node_not_set</span><span class=\"p\" data-group-id=\"1057183775-5\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"1057183775-6\">(</span><span class=\"s\">&quot;No leader elected yet</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\" data-group-id=\"1057183775-6\">)</span><span class=\"w\">\n  </span><span class=\"k\">end</span><span class=\"p\">.</span>","ref":"elector.html#get_leader/0"},{"type":"function","title":"elector.is_leader/0","doc":"Checks if the current node is the elected leader. Returns  {ok, true}  if this node is currently the leader,  {ok, false}  if another node is the leader, or an error if no leader has been elected yet. ## Examples <span class=\"w\">  </span><span class=\"c1\">% Check leadership status</span><span class=\"w\">\n  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"nc\">elector</span><span class=\"p\">:</span><span class=\"nf\">is_leader</span><span class=\"p\" data-group-id=\"5244146542-1\">(</span><span class=\"p\" data-group-id=\"5244146542-1\">)</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"5244146542-2\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">true</span><span class=\"p\" data-group-id=\"5244146542-2\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"5244146542-3\">(</span><span class=\"s\">&quot;This node is the leader</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\" data-group-id=\"5244146542-3\">)</span><span class=\"p\">;</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"5244146542-4\">{</span><span class=\"ss\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">false</span><span class=\"p\" data-group-id=\"5244146542-4\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"5244146542-5\">(</span><span class=\"s\">&quot;This node is not the leader</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\" data-group-id=\"5244146542-5\">)</span><span class=\"p\">;</span><span class=\"w\">\n      </span><span class=\"p\" data-group-id=\"5244146542-6\">{</span><span class=\"ss\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">leader_node_not_set</span><span class=\"p\" data-group-id=\"5244146542-6\">}</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">\n          </span><span class=\"nc\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\" data-group-id=\"5244146542-7\">(</span><span class=\"s\">&quot;No leader elected yet</span><span class=\"si\">~n</span><span class=\"s\">&quot;</span><span class=\"p\" data-group-id=\"5244146542-7\">)</span><span class=\"w\">\n  </span><span class=\"k\">end</span><span class=\"p\">.</span>","ref":"elector.html#is_leader/0"},{"type":"type","title":"elector.leader_node/0","doc":"","ref":"elector.html#t:leader_node/0"},{"type":"behaviour","title":"elector_strategy_behaviour","doc":"Defines the base behaviour for election strategies.","ref":"elector_strategy_behaviour.html"},{"type":"type","title":"elector_strategy_behaviour.candidate_nodes/0","doc":"","ref":"elector_strategy_behaviour.html#t:candidate_nodes/0"},{"type":"function","title":"elector_strategy_behaviour.candidate_nodes/0","doc":"Returns a list of nodes that are eligible to become the leader.","ref":"elector_strategy_behaviour.html#candidate_nodes/0"},{"type":"function","title":"elector_strategy_behaviour.elect/0","doc":"Starts the election process by triggering the strategy modules elect() function. The election implementation should only contain the logic for selecting the leader node and returning the leader node name. The elect/0 function is triggered on all nodes automatically by the elector application. This means the strategy implementation does not have to worry about starting the election on all nodes.","ref":"elector_strategy_behaviour.html#elect/0"},{"type":"callback","title":"elector_strategy_behaviour.elect/1","doc":"","ref":"elector_strategy_behaviour.html#c:elect/1"},{"type":"type","title":"elector_strategy_behaviour.leader/0","doc":"","ref":"elector_strategy_behaviour.html#t:leader/0"},{"type":"extras","title":"Getting Started","doc":"# Elector\n\n![example workflow](https://github.com/alfetahe/elector/actions/workflows/erlang.yml/badge.svg)","ref":"readme.html"},{"type":"extras","title":"Description - Getting Started","doc":"Elector is an Erlang application that automatically detects all nodes inside the distributed Erlang cluster and chooses the leader node.\nThe elections are started automatically when the Elector application is started or when a node joins or leaves the cluster.\nElector also allows you to run pre- and post-election hooks that will be triggered when the election process is started and finished.\n\nThe default election strategy is to choose the node with the highest uptime.","ref":"readme.html#description"},{"type":"extras","title":"Features - Getting Started","doc":"- Automatic election process on startup or when node joins/leaves the cluster\n- Ability to configure pre and post election hooks that will be called before and after the election process. **These hooks must return within 1 second to avoid timeouts**.\n- Provides 4 built in election strategies (time based) and allows you to define your own strategy implementation (See `elector_strategy_behaviour` module for reference)\n- Provides quorum option to detect split brain scenarios\n- Provides option to define the election delay in milliseconds before the election process is started automatically and queue the election calls","ref":"readme.html#features"},{"type":"extras","title":"Configuration - Getting Started","doc":"Elector supports the following configurations:\n\n- `election_delay` - The delay in milliseconds before the new election starts. This value is used when automatic election is triggered either by node join/leave or startup. Default value is 1 second (1000).\n\n- `strategy_module` - The module that is used for the election strategy implementation. Available options are: `elector_rt_high_strategy` and `elector_rt_low_strategy`. Feel free to write your own strategy module that implements the `elector_strategy_behaviour` module. Default value is `elector_rt_high_strategy` which chooses the node with the highest runtime.\n\n- `pre_election_hooks` - A list of hooks/function calls that will be triggered exactly before the node is starting the election. Expects a list of tuples with the following format: `{Module, Function, Args}`. Default value is `[]`.\n\n- `post_election_hooks` - A list of hooks/function calls that will be triggered exactly after the election process. Expects a list of tuples with the following format: `{Module, Function, Args}`. Default value is `[]`.\n\n- `quorum_size` - The number of nodes (including the local node) that should be available in the cluster before the election process is started. Do not set it to `0` as it will disable the election process, leave empty or `1` if you want to run the election process even if there are no other nodes in the cluster. Default value is `1`.\n\n- `candidate_node` - Boolean indicating if this node should be a candidate for the leader election. Default value is `true`.\n\n- `hooks_execution` - Atom indicating if the pre and post election hooks should be executed on the node starting the election process or on all nodes. The election process will be started automatically by the global commission process. The node who starts the commission process is not known and can be any node in the cluster. Available values are: `local` and `global`. Default value is `global`.\n\n- `automatic_elections` - Boolean indicating if the automatic election process should be started when node joins or leaves the cluster. Default value is `true`.\n\nKeep in mind to use the same configuration for all nodes in the cluster!","ref":"readme.html#configuration"},{"type":"extras","title":"Guides - Getting Started","doc":"","ref":"readme.html#guides"},{"type":"extras","title":"Installation for Elixir application - Getting Started","doc":"1. Add `{:elector, \"~> 0.3.0\"}` under the deps in the `mix.exs` file:\n\n```elixir\ndefp deps do\n    [\n        {:elector, \"~> 0.3.0\"}\n    ]\nend\n```\n\n2. Add `elector` under the extra_applications in the `mix.exs` file:\n\n```elixir\ndef application do\n    [\n        extra_applications: [:elector],\n        mod: {MyApp, []}\n    ]\nend\n```","ref":"readme.html#installation-for-elixir-application"},{"type":"extras","title":"Installation for Erlang application - Getting Started","doc":"1. Add `elector` to the deps in the `rebar.config` file:\n\n```erlang\n{deps, [{\"elector\", \"0.3.0\"}]}.\n```\n\n2. Add `elector` to the `applications` list in the `myapp.app.src` file:\n\n```erlang\n{applications, [elector]}.\n```","ref":"readme.html#installation-for-erlang-application"},{"type":"extras","title":"Examples - Getting Started","doc":"","ref":"readme.html#examples"},{"type":"extras","title":"Start election manually - Getting Started","doc":"#### Elixir\n```elixir\n> alias :elector, as Elector\n> Elector.elect_sync() # Start election synchronously\n{:ok, :election_finished}\n> Elector.elect() # Start election asynchronously\n{:ok, :election_started}\n```\n#### Erlang\n```erlang\n> elector:elect_sync(). % Start election synchronously\n{ok, election_finished}\n> elector:elect(). % Start election asynchronously\n{ok, election_started}\n```","ref":"readme.html#start-election-manually"},{"type":"extras","title":"Get current leader - Getting Started","doc":"#### Elixir\n```elixir\n> alias :elector, as Elector\n> Elector.get_leader()\n{:ok, :example_node}\n```\n\n#### Erlang\n```erlang\n> elector:get_leader().\n{ok, example_node}\n```\n\nSee the `elector` module for more.\n\nhttps://hexdocs.pm/elector/","ref":"readme.html#get-current-leader"},{"type":"extras","title":"High level overview - Getting Started","doc":"Elector is a distributed application that utilizes the Erlang global module to spawn a singleton process named\n`elector_commission`. The commission process is responsible for starting the election process and keeping track of the nodes in the cluster.\nThe election process is started by the commission process, which calls the `elect/1` function from the strategy module.\nThis function gathers the necessary information from the cluster and decides which node should become the leader.\n\nEach node spawns the following local processes:\n- `elector_overviewer` process is responsible for starting the commission and monitor it across the cluster.\n- `elector_candidate` process holding the candidate information that describes if the node is a candidate for the leader election.\n- `elector_state` process holding the selected leader information.\n\nAll processes are supervised by the `elector_sup` supervisor.","ref":"readme.html#high-level-overview"},{"type":"extras","title":"Setup Elector locally - Getting Started","doc":"","ref":"readme.html#setup-elector-locally"},{"type":"extras","title":"Setup the elector locally and run the application: - Getting Started","doc":"- `docker-compose up -d`\n- `docker exec -it elector_elector_1 sh`\n- `rebar3 compile`\n- `erl -sname local -setcookie cookievalue -pa ./_build/default/lib/elector/ebin -eval \"application:start(elector)\"`","ref":"readme.html#setup-the-elector-locally-and-run-the-application"},{"type":"extras","title":"Run tests: - Getting Started","doc":"- `rebar3 compile && ct_run -dir test -logdir test_logs -pa ./_build/default/lib/elector/ebin -setcookie cookievalue`","ref":"readme.html#run-tests"},{"type":"extras","title":"Generate documentation: - Getting Started","doc":"- `rebar3 ex_doc`","ref":"readme.html#generate-documentation"},{"type":"extras","title":"Changelog","doc":"# Change log","ref":"changelog.html"},{"type":"extras","title":"v0.3.1 - 2025.11.XX - Changelog","doc":"","ref":"changelog.html#v0-3-1-2025-11-xx"},{"type":"extras","title":"Changed: - Changelog","doc":"- `hooks_execution` - Default value changed from `global` to `local`. This means that by default, the pre and post election hooks will now be executed only on the node that initiates the election process. This change aims to reduce unnecessary execution of hooks on all nodes, which can be particularly beneficial in larger clusters where such operations might lead to increased load and potential performance issues.","ref":"changelog.html#changed"},{"type":"extras","title":"v0.3.0 - 2023.07.28 - Changelog","doc":"The existing API functions did not change but the overall architecture did change meaning it\nis recommended to restart the elector application on all nodes after upgrading \nto this version.","ref":"changelog.html#v0-3-0-2023-07-28"},{"type":"extras","title":"Update rebar.config deps list: - Changelog","doc":"```{deps, [{elector, \"0.3.0\"}]}.```","ref":"changelog.html#update-rebar-config-deps-list"},{"type":"extras","title":"Changed: - Changelog","doc":"- The previous implementation started the election process on all nodes. The new version utilizes a global process(singleton) named 'commission' which will initiate the election and gathers information from the cluster. Based on this information, the 'commission' process will determine the leader node.\nThe selected node information will then be propagated to all other nodes in the cluster. This significant change grants us better control over the election process and helps reduce bandwidth usage.\n- Default election strategy is now `elector_ut_high_strategy` which selects the node with the highest uptime as the leader.","ref":"changelog.html#changed-1"},{"type":"extras","title":"Added - Changelog","doc":"- `candidate_node` configuration option which will allow us to leave the node out of the election process. Default value is `true`.\n- `hooks_execution` - configuration option which defines if the hooks should be executed on all nodes or only on the commission node. Default value is `global`.\n- `automatic_elections` configuration option which will allow us to disable the automatic election process started by the commission when node joins or leaves the cluster. Default value is `true`.\n- `elector_config_handler:add_pre_election_hook/3` - function to add new pre election hook.\n- `elector_config_handler:add_post_election_hook/3` - function to add new post election hook.\n- `elector_config_handler:remove_pre_election_hook/3` - function to remove pre election hook.\n- `elector_config_handler:remove_post_election_hook/3` - function to remove post election hook.\n- 2 new strategies that are based on node uptime.","ref":"changelog.html#added"},{"type":"extras","title":"Removed - Changelog","doc":"- `startup_hooks_enabled` configuration option","ref":"changelog.html#removed"},{"type":"extras","title":"v0.2.2 - 2023.04.02 - Changelog","doc":"","ref":"changelog.html#v0-2-2-2023-04-02"},{"type":"extras","title":"Update rebar.config deps list: - Changelog","doc":"```{deps, [{elector, \"0.2.2\"}]}.```","ref":"changelog.html#update-rebar-config-deps-list-1"},{"type":"extras","title":"Changed: - Changelog","doc":"- Calling manually elect functions will trigger the election globally\non all nodes\n- Doc directory to git\n- Test logs directory to git\n- Updated documentation and readme file","ref":"changelog.html#changed-2"},{"type":"extras","title":"Added - Changelog","doc":"- New API function clear_leader/0 with test suite\n- Added more assertions for elector:elect and elector:elect_sync functions","ref":"changelog.html#added-1"},{"type":"extras","title":"Fixed - Changelog","doc":"- Fixed typo on the elect cast function gen_server's name.","ref":"changelog.html#fixed"},{"type":"extras","title":"v0.2.1 - 2023.03.19 - Changelog","doc":"","ref":"changelog.html#v0-2-1-2023-03-19"},{"type":"extras","title":"Update rebar.config deps list: - Changelog","doc":"```{deps, [{elector, \"0.2.1\"}]}.```","ref":"changelog.html#update-rebar-config-deps-list-2"},{"type":"extras","title":"Changed: - Changelog","doc":"- Made post and pre election hooks synchronous\n- Updated github CI settings\n- Updated documentation","ref":"changelog.html#changed-3"},{"type":"extras","title":"Fixed: - Changelog","doc":"- Renamed modules to avoid collisions with other applications\n- Post election hooks were not running after the election fix","ref":"changelog.html#fixed-1"},{"type":"extras","title":"v0.2.0 - 2023.03.16 - Changelog","doc":"","ref":"changelog.html#v0-2-0-2023-03-16"},{"type":"extras","title":"Update rebar.config deps list: - Changelog","doc":"```{deps, [{elector, \"0.2.0\"}]}.```","ref":"changelog.html#update-rebar-config-deps-list-3"},{"type":"extras","title":"Added: - Changelog","doc":"- New configuration option `quorum_size` to set the minimum number of nodes that should be available in the cluster before the election process is started.","ref":"changelog.html#added-2"},{"type":"extras","title":"Changed: - Changelog","doc":"- Updated Erlang version inside the docker-compose.yml\n- Set the user and group for the docker container to `1000:1000` to match the host user and group.\n- Updated documentation\n- Enabled all features for the BEAM using the `ERL_AFLAGS=-enable-feature all` inside the docker-compose.yml file.","ref":"changelog.html#changed-4"},{"type":"extras","title":"Fixed: - Changelog","doc":"- Fixed running the ct_run command inside the docker container\n- Removed duplicate `project_plugins` from the rebar.config file","ref":"changelog.html#fixed-2"},{"type":"extras","title":"v0.1.1 - 2023.01.29 - Changelog","doc":"","ref":"changelog.html#v0-1-1-2023-01-29"},{"type":"extras","title":"Updated edocs overview section. - Changelog","doc":"","ref":"changelog.html#updated-edocs-overview-section"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}